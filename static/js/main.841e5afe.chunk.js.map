{"version":3,"sources":["components/ATM/ATM.module.scss","utils/ATMLogic.ts","components/ATM/ATMInfo.tsx","components/ATM/Numpad.tsx","components/ATM/ATMResult.tsx","components/ATM/SelectBanknotes.tsx","components/ATM/ATM.tsx","App.tsx","index.tsx"],"names":["module","exports","getBanknoteWithBiggestAmount","amountOfBanknotes","biggestAmount","Math","max","Object","values","keys","reverse","find","key","ATMLogic","amount","arrOfGivenBanknotes","maxBanknoteAmount","copy","Number","length","push","calcHowMuchWasWithdrawn","moneyCouldntWithdraw","givenBanknotesToUser","getGivenBanknotesWithTheirFrequency","moneyLeft","toFixed","amountOfBanknotesInATM","givenBanknotesArr","reduce","acum","banknote","ATMInfo","atmResult","onAtmInfoClose","className","styles","atmInfoWrapper","atmInfoInnerWrapper","map","i","btnAtmInfoClose","onClick","Numpad","handleInputFromNumpad","numpad","e","target","children","innerText","numpadItem","ATMResult","amountOfMoneyLeft","SelectBanknotes","handleAmountOfBanknotesChange","onChange","value","banknotes","ATM","useRef","useState","setAtmResult","atmInfoVisible","setAtmInfoVisible","setAmountOfMoneyLeft","amountOfEnteredMoney","setAmountOfEnteredMoney","errorInInput","setErrorInInput","handleSubmit","flag","includes","match","split","validateInputValue","current","inputWrapper","event","currentTarget","replace","inputError","input","placeholder","inputLabel","prev","slice","btnShowAtmInfo","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yGACAA,EAAOC,QAAU,CAAC,OAAS,oBAAoB,WAAa,wBAAwB,aAAe,0BAA0B,MAAQ,mBAAmB,eAAiB,4BAA4B,oBAAsB,iCAAiC,eAAiB,4BAA4B,gBAAkB,6BAA6B,WAAa,wBAAwB,WAAa,0B,gGCCpYC,EAA+B,SAACC,GAClC,IAAMC,EAAgBC,KAAKC,IAAL,MAAAD,KAAI,YAAQE,OAAOC,OAAOL,KAChD,OAAOI,OAAOE,KAAKN,GACdO,UACAC,MAAK,SAACC,GAAD,OAAiBT,EAAkBS,KAASR,MAwB7CS,EAAW,SAACC,EAAgBX,GACrC,IACA,EAvB4B,SAACW,EAAgBX,EAA+BY,GAE5E,IADA,IAAIC,EAAoBd,EAA6BC,GAC9CW,EAAS,GAAG,CACfE,EAAoBd,EAA6BC,GAEjD,IADA,IAAIc,EAAI,eAAQd,IACTe,OAAOF,GAAqBF,GAAUX,EAAkBa,IAAsB,YAC1EC,EAAKD,GAEZA,EAAoBd,EAA6Be,GAChB,IAA7BV,OAAOE,KAAKQ,GAAME,UAE1B,KAAIL,GAAUI,OAAOF,IAId,MAHHb,EAAkBa,GAAqBb,EAAkBa,GAAqB,EAC9EF,GAAUI,OAAOF,GACjBD,EAAoBK,KAAKJ,GAIjC,MAAO,CAAED,sBAAqBD,UAKgCO,CAAwBP,EAAQX,EAAmB,IAAzGY,EAAR,EAAQA,oBAA6BO,EAArC,EAA6BR,OAG7B,MAAO,CACHS,qBAAsBC,EAHHT,GAInBU,UAAWH,EAAqBI,QAAQ,GACxCC,uBAAwBxB,IAI1BqB,EAAsC,SAACI,GACzC,OAAOA,EAAkBC,QAAO,SAACC,EAAWC,GAGxC,OAFIA,KAAYD,EAAMA,EAAKC,IAAa,EACnCD,EAAKC,GAAY,EACfD,IACR,K,uBClBQE,EApBC,SAAC,GAA6C,IAA3CC,EAA0C,EAA1CA,UAAWC,EAA+B,EAA/BA,eAC1B,OACI,qBAAKC,UAAWC,IAAOC,eAAvB,SACI,sBAAKF,UAAWC,IAAOE,oBAAvB,yBAEK/B,OAAOE,KAAKwB,GAAWM,KAAI,SAACR,EAAUS,GACnC,OACI,2CACc,4BAAIT,IADlB,aACyC,4BAAIE,EAAUF,OAD/CS,MAKhB,wBAAQL,UAAWC,IAAOK,gBAAiBC,QAASR,EAApD,qBCYDS,EA1BA,SAAC,GAAwC,IAAtCC,EAAqC,EAArCA,sBAOd,OACI,sBAAKT,UAAWC,IAAOS,OAAQH,QAPT,SAACI,GACvB,IAAMC,EAASD,EAAEC,OACbA,EAAOC,SAAS7B,QACpByB,EAAsBG,EAAOE,YAI7B,UACI,qBAAKd,UAAWC,IAAOc,WAAvB,eACA,qBAAKf,UAAWC,IAAOc,WAAvB,eACA,qBAAKf,UAAWC,IAAOc,WAAvB,eACA,qBAAKf,UAAWC,IAAOc,WAAvB,eACA,qBAAKf,UAAWC,IAAOc,WAAvB,eACA,qBAAKf,UAAWC,IAAOc,WAAvB,eACA,qBAAKf,UAAWC,IAAOc,WAAvB,eACA,qBAAKf,UAAWC,IAAOc,WAAvB,eACA,qBAAKf,UAAWC,IAAOc,WAAvB,eACA,qBAAKf,UAAWC,IAAOc,WAAvB,eACA,qBAAKf,UAAWC,IAAOc,WAAvB,eACA,qBAAKf,UAAWC,IAAOc,WAAvB,SAAoC,UACpC,qBAAKf,UAAWC,IAAOc,WAAvB,SAAoC,iBCFjCC,EAlBG,SAAC,GAAkD,IAAhDlB,EAA+C,EAA/CA,UAAWmB,EAAoC,EAApCA,kBAC5B,OACI,8BACI,6CAEK7C,OAAOE,KAAKwB,GAAWM,KAAI,SAACR,EAAUS,GACnC,OACI,2CACeT,EADf,aACmCE,EAAUF,KADrCS,MAKhB,6BAAKY,EAAoB,sBAAwBA,EAAoB,aCEtEC,EAhBS,SAAC,GAAyD,IAAvDC,EAAsD,EAAtDA,8BACvB,OACI,qCACI,kEACA,yBAAQC,SAAUD,EAAlB,UACI,wBAAQE,MAAM,IAAd,mFACA,wBAAQA,MAAM,IAAd,iFACA,wBAAQA,MAAM,IAAd,gFACA,wBAAQA,MAAM,IAAd,gFACA,wBAAQA,MAAM,IAAd,kFACA,wBAAQA,MAAM,IAAd,mFCPVC,EAA0B,CAC5B,CAAE,IAAM,IAAK,IAAM,IAAK,IAAM,IAAM,IAAK,IAAM,IAAK,IAAM,IAAK,IAAM,GAAI,KACzE,CAAE,IAAM,IAAK,IAAM,IAAK,IAAM,KAAM,IAAK,KAAM,IAAK,IAAK,IAAK,KAAM,GAAI,MACxE,CAAE,IAAM,IAAK,IAAM,IAAK,IAAM,IAAK,IAAK,KAAM,IAAK,KAAM,IAAK,KAAM,GAAI,KACxE,CAAE,IAAM,IAAK,IAAM,IAAK,IAAM,KAAM,IAAK,KAAM,IAAK,KAAM,IAAK,IAAK,GAAI,KACxE,CAAE,IAAM,KAAM,IAAM,IAAK,IAAM,IAAK,IAAK,KAAM,IAAK,KAAM,IAAK,KAAM,GAAI,MACzE,CAAE,IAAM,GAAI,IAAM,IAAK,IAAM,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,MAiFzDC,EA9EH,WACR,IAAMvD,EAAoBwD,iBAAOF,EAAU,IAE3C,EAAkCG,qBAAlC,mBAAO3B,EAAP,KAAkB4B,EAAlB,KACA,EAA4CD,oBAAS,GAArD,mBAAOE,EAAP,KAAuBC,EAAvB,KACA,EAAkDH,mBAAS,GAA3D,mBAAOR,EAAP,KAA0BY,EAA1B,KACA,EAAwDJ,mBAAS,IAAjE,mBAAOK,EAAP,KAA6BC,EAA7B,KACA,EAAwCN,oBAAS,GAAjD,mBAAOO,EAAP,KAAqBC,EAArB,KA8BMC,EAAe,WACjB,GAVuB,SAACb,GACxB,IAAIc,GAAO,EAKX,OAJ6B,KAAzBL,GACkB,MAAbT,EAAM,IAA2B,MAAbA,EAAM,IAC1BA,EAAMe,SAAS,OAASf,EAAMgB,MAAM,OAAQrD,OAAS,GAAKqC,EAAMiB,MAAM,KAAK,GAAGtD,OAAS,MAF/DmD,GAAO,GAIjCA,EAIFI,CAAmBT,GAAxB,CAIAG,GAAgB,GAChB,MAA4CvD,EAASK,OAAO+C,GAAuB9D,EAAkBwE,SAA7FpD,EAAR,EAAQA,qBAAsBE,EAA9B,EAA8BA,UAC9BoC,EAAatC,GACbyC,EAAqBvC,QANjB2C,GAAgB,IAiBxB,OACI,qCACI,cAAC,EAAD,CAAiBd,8BAjDa,SAACR,GACnC3C,EAAkBwE,QAAUlB,GAAWX,EAAEC,OAAOS,UAiD5C,sBAAKrB,UAAWC,IAAOwC,aAAvB,UACI,uBACIpB,MAAOS,EACPV,SAjDmB,SAACsB,GAChC,IAAIrB,EAAQqB,EAAMC,cAActB,MAChCA,EAAQA,EAAMuB,QAAQ,YAAY,SAACP,GAAD,MAAW,MAC7CN,EAAwBV,IA+CZrB,UAAWgC,EAAY,UAAM/B,IAAO4C,WAAb,YAA2B5C,IAAO6C,OAAU7C,IAAO6C,MAC1EC,YAAY,0CAEhB,uBAAO/C,UAAWC,IAAO+C,WAAzB,SAAsChB,EAAe,mBAAqB,QAE9E,cAAC,EAAD,CAAQvB,sBAjDc,SAACY,GACb,aAAVA,EAImBU,EAAT,UAAVV,EAA2C,SAAC4B,GAAD,OAAUA,EAAKC,MAAM,GAAI,IAC3C,SAACD,GAAD,OAAUA,EAAO5B,IAJ1Ca,OAgDA,qBAAKlC,UAAWC,IAAOkD,eAAgB5C,QAjBrB,WACtBqB,GAAkB,IAgBd,eAGC9B,GAAa,cAAC,EAAD,CAAWA,UAAWA,EAAWmB,kBAAmBA,IACjEU,GAAkB,cAAC,EAAD,CAAS7B,UAAW9B,EAAkBwE,QAASzC,eAzB/C,WACvB6B,GAAkB,UCxDXwB,MARf,WACI,OACI,qBAAKpD,UAAU,MAAf,SACI,cAAC,EAAD,OCFZqD,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.841e5afe.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"numpad\":\"ATM_numpad__3jS-z\",\"numpadItem\":\"ATM_numpadItem__BtmDR\",\"inputWrapper\":\"ATM_inputWrapper__1n1cC\",\"input\":\"ATM_input__2pKyJ\",\"atmInfoWrapper\":\"ATM_atmInfoWrapper__1n8_9\",\"atmInfoInnerWrapper\":\"ATM_atmInfoInnerWrapper__MWasY\",\"btnShowAtmInfo\":\"ATM_btnShowAtmInfo__2J_6J\",\"btnAtmInfoClose\":\"ATM_btnAtmInfoClose__3uCIa\",\"inputError\":\"ATM_inputError__3o7ac\",\"inputLabel\":\"ATM_inputLabel__makm9\"};","import { IBanknotes } from '../types/ATMTypes';\r\n\r\nconst getBanknoteWithBiggestAmount = (amountOfBanknotes: IBanknotes) => {\r\n    const biggestAmount = Math.max(...Object.values(amountOfBanknotes));\r\n    return Object.keys(amountOfBanknotes)\r\n        .reverse()\r\n        .find((key: string) => amountOfBanknotes[key] === biggestAmount);\r\n};\r\n\r\nconst calcHowMuchWasWithdrawn = (amount: number, amountOfBanknotes: IBanknotes, arrOfGivenBanknotes: string[]): any => {\r\n    let maxBanknoteAmount = getBanknoteWithBiggestAmount(amountOfBanknotes) as string;\r\n    while (amount > 0) {\r\n        maxBanknoteAmount = getBanknoteWithBiggestAmount(amountOfBanknotes) as string;\r\n        let copy = { ...amountOfBanknotes };\r\n        while (Number(maxBanknoteAmount) > amount || amountOfBanknotes[maxBanknoteAmount] <= 0) {\r\n            delete copy[maxBanknoteAmount];\r\n            //сорян конечно за сложность алгоритма O(n^3), но иначе никак\r\n            maxBanknoteAmount = getBanknoteWithBiggestAmount(copy) as string;\r\n            if (Object.keys(copy).length === 0) break;\r\n        }\r\n        if (amount >= Number(maxBanknoteAmount)) {\r\n            amountOfBanknotes[maxBanknoteAmount] = amountOfBanknotes[maxBanknoteAmount] - 1;\r\n            amount -= Number(maxBanknoteAmount);\r\n            arrOfGivenBanknotes.push(maxBanknoteAmount);\r\n        } else break;\r\n    }\r\n\r\n    return { arrOfGivenBanknotes, amount };\r\n};\r\n\r\nexport const ATMLogic = (amount: number, amountOfBanknotes: IBanknotes) => {\r\n    let givenBanknotesToUser: string[] = [];\r\n    const { arrOfGivenBanknotes, amount: moneyCouldntWithdraw } = calcHowMuchWasWithdrawn(amount, amountOfBanknotes, []);\r\n    givenBanknotesToUser = arrOfGivenBanknotes;\r\n\r\n    return {\r\n        givenBanknotesToUser: getGivenBanknotesWithTheirFrequency(givenBanknotesToUser),\r\n        moneyLeft: moneyCouldntWithdraw.toFixed(2),\r\n        amountOfBanknotesInATM: amountOfBanknotes,\r\n    };\r\n};\r\n\r\nconst getGivenBanknotesWithTheirFrequency = (givenBanknotesArr: string[]) => {\r\n    return givenBanknotesArr.reduce((acum: any, banknote) => {\r\n        if (banknote in acum) acum[banknote] += 1;\r\n        else acum[banknote] = 1;\r\n        return acum;\r\n    }, {});\r\n};\r\n","import React from 'react';\r\nimport { IBanknotes } from '../../types/ATMTypes';\r\nimport styles from './ATM.module.scss';\r\n\r\ninterface IATMInfo {\r\n    atmResult: IBanknotes;\r\n    onAtmInfoClose: () => void;\r\n}\r\n\r\nconst ATMInfo = ({ atmResult, onAtmInfoClose }: IATMInfo) => {\r\n    return (\r\n        <div className={styles.atmInfoWrapper}>\r\n            <div className={styles.atmInfoInnerWrapper}>\r\n                Left in ATM:\r\n                {Object.keys(atmResult).map((banknote, i) => {\r\n                    return (\r\n                        <p key={i}>\r\n                            banknote: <b>{banknote}</b>, amount: <b>{atmResult[banknote]}</b>\r\n                        </p>\r\n                    );\r\n                })}\r\n                <button className={styles.btnAtmInfoClose} onClick={onAtmInfoClose}>\r\n                    X\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ATMInfo;\r\n","import React from 'react';\r\nimport styles from './ATM.module.scss';\r\n\r\ninterface INumpad {\r\n    handleInputFromNumpad: (value: string) => void;\r\n}\r\n\r\nconst Numpad = ({ handleInputFromNumpad }: INumpad) => {\r\n    const handleNumpadClick = (e: React.MouseEvent<HTMLDivElement>) => {\r\n        const target = e.target as HTMLElement;\r\n        if (target.children.length) return; // if pressed numpad but not numpadItem then skip\r\n        handleInputFromNumpad(target.innerText);\r\n    };\r\n\r\n    return (\r\n        <div className={styles.numpad} onClick={handleNumpadClick}>\r\n            <div className={styles.numpadItem}>7</div>\r\n            <div className={styles.numpadItem}>8</div>\r\n            <div className={styles.numpadItem}>9</div>\r\n            <div className={styles.numpadItem}>4</div>\r\n            <div className={styles.numpadItem}>5</div>\r\n            <div className={styles.numpadItem}>6</div>\r\n            <div className={styles.numpadItem}>1</div>\r\n            <div className={styles.numpadItem}>2</div>\r\n            <div className={styles.numpadItem}>3</div>\r\n            <div className={styles.numpadItem}>0</div>\r\n            <div className={styles.numpadItem}>.</div>\r\n            <div className={styles.numpadItem}>{'Clear'}</div>\r\n            <div className={styles.numpadItem}>{'Withdraw'}</div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Numpad;\r\n","import React from 'react';\r\nimport { IBanknotes } from '../../types/ATMTypes';\r\n\r\ninterface IATMResult {\r\n    atmResult: IBanknotes;\r\n    amountOfMoneyLeft: number;\r\n}\r\n\r\nconst ATMResult = ({ atmResult, amountOfMoneyLeft }: IATMResult) => {\r\n    return (\r\n        <div>\r\n            <div>\r\n                Withdrawn:\r\n                {Object.keys(atmResult).map((banknote, i) => {\r\n                    return (\r\n                        <p key={i}>\r\n                            banknote: {banknote}, amount: {atmResult[banknote]}\r\n                        </p>\r\n                    );\r\n                })}\r\n                <p>{+amountOfMoneyLeft ? 'Couldn\"t withdraw: ' + amountOfMoneyLeft : null}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ATMResult;\r\n","import React from 'react';\r\n\r\ninterface ISelectBanknotes {\r\n    handleAmountOfBanknotesChange: (e: React.ChangeEvent<HTMLSelectElement>) => void;\r\n}\r\n\r\nconst SelectBanknotes = ({ handleAmountOfBanknotesChange }: ISelectBanknotes) => {\r\n    return (\r\n        <>\r\n            <p>Select Amount Of Banknotes in ATM</p>\r\n            <select onChange={handleAmountOfBanknotesChange}>\r\n                <option value=\"0\">5000=100; 2000=400; 1000=1000; 500=3000; 200=5000; 100=8000; 50=10000</option>\r\n                <option value=\"1\">5000=476; 2000=345; 1000=6741; 500=4362; 200=234; 100=1643; 50=3450</option>\r\n                <option value=\"2\">5000=234; 2000=678; 1000=845; 500=2451; 200=9654; 100=2345; 50=234</option>\r\n                <option value=\"3\">5000=546; 2000=562; 1000=2543; 500=4365; 200=2154; 100=124; 50=342</option>\r\n                <option value=\"4\">5000=2732; 2000=347; 1000=479; 500=7556; 200=3296; 100=1257; 50=3854</option>\r\n                <option value=\"5\">5000=73; 2000=147; 1000=279; 500=356; 200=696; 100=857; 50=854</option>\r\n            </select>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default SelectBanknotes;\r\n","import React, { useRef, useState } from 'react';\r\nimport { ATMLogic } from '../../utils/ATMLogic';\r\nimport ATMInfo from './ATMInfo';\r\nimport Numpad from './Numpad';\r\nimport styles from './ATM.module.scss';\r\nimport ATMResult from './ATMResult';\r\nimport { IBanknotes } from '../../types/ATMTypes';\r\nimport SelectBanknotes from './SelectBanknotes';\r\n\r\nconst banknotes: IBanknotes[] = [\r\n    { 5000: 100, 2000: 400, 1000: 1000, 500: 3000, 200: 5000, 100: 8000, 50: 10000 },\r\n    { 5000: 476, 2000: 345, 1000: 6741, 500: 4362, 200: 234, 100: 1643, 50: 3450 },\r\n    { 5000: 234, 2000: 678, 1000: 845, 500: 2451, 200: 9654, 100: 2345, 50: 234 },\r\n    { 5000: 546, 2000: 562, 1000: 2543, 500: 4365, 200: 2154, 100: 124, 50: 342 },\r\n    { 5000: 2732, 2000: 347, 1000: 479, 500: 7556, 200: 3296, 100: 1257, 50: 3854 },\r\n    { 5000: 73, 2000: 147, 1000: 279, 500: 356, 200: 696, 100: 857, 50: 854 },\r\n];\r\n\r\nconst ATM = () => {\r\n    const amountOfBanknotes = useRef(banknotes[0]);\r\n\r\n    const [atmResult, setAtmResult] = useState<IBanknotes>();\r\n    const [atmInfoVisible, setAtmInfoVisible] = useState(false);\r\n    const [amountOfMoneyLeft, setAmountOfMoneyLeft] = useState(0);\r\n    const [amountOfEnteredMoney, setAmountOfEnteredMoney] = useState('');\r\n    const [errorInInput, setErrorInInput] = useState(false);\r\n\r\n    const handleAmountOfBanknotesChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\r\n        amountOfBanknotes.current = banknotes[+e.target.value];\r\n    };\r\n\r\n    const handleEnteredAmountOfMoney = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        let value = event.currentTarget.value;\r\n        value = value.replace(/[^0-9.]/g, (match) => '');\r\n        setAmountOfEnteredMoney(value);\r\n    };\r\n\r\n    const handleInputFromNumpad = (value: string) => {\r\n        if (value === 'Withdraw') {\r\n            handleSubmit();\r\n            return;\r\n        }\r\n        if (value === 'Clear') setAmountOfEnteredMoney((prev) => prev.slice(0, -1));\r\n        else setAmountOfEnteredMoney((prev) => prev + value);\r\n    };\r\n\r\n    const validateInputValue = (value: string) => {\r\n        let flag = true;\r\n        if (amountOfEnteredMoney === '') flag = false;\r\n        else if (value[0] === '0' || value[0] === '.') flag = false;\r\n        else if (value.includes('.') && (value.match(/\\./g)!.length > 1 || value.split('.')[1].length > 2)) flag = false;\r\n\r\n        return flag;\r\n    };\r\n\r\n    const handleSubmit = () => {\r\n        if (!validateInputValue(amountOfEnteredMoney)) {\r\n            setErrorInInput(true);\r\n            return;\r\n        }\r\n        setErrorInInput(false);\r\n        const { givenBanknotesToUser, moneyLeft } = ATMLogic(Number(amountOfEnteredMoney), amountOfBanknotes.current);\r\n        setAtmResult(givenBanknotesToUser);\r\n        setAmountOfMoneyLeft(moneyLeft);\r\n    };\r\n\r\n    const handleAtmInfoClose = () => {\r\n        setAtmInfoVisible(false);\r\n    };\r\n\r\n    const handleAtmInfoOpen = () => {\r\n        setAtmInfoVisible(true);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <SelectBanknotes handleAmountOfBanknotesChange={handleAmountOfBanknotesChange} />\r\n            <div className={styles.inputWrapper}>\r\n                <input\r\n                    value={amountOfEnteredMoney}\r\n                    onChange={handleEnteredAmountOfMoney}\r\n                    className={errorInInput ? `${styles.inputError} ${styles.input}` : styles.input}\r\n                    placeholder=\"Enter the amount of money to withdraw\"\r\n                />\r\n                <label className={styles.inputLabel}>{errorInInput ? 'Enter valid data' : ''}</label>\r\n            </div>\r\n            <Numpad handleInputFromNumpad={handleInputFromNumpad} />\r\n            <div className={styles.btnShowAtmInfo} onClick={handleAtmInfoOpen}>\r\n                i\r\n            </div>\r\n            {atmResult && <ATMResult atmResult={atmResult} amountOfMoneyLeft={amountOfMoneyLeft} />}\r\n            {atmInfoVisible && <ATMInfo atmResult={amountOfBanknotes.current} onAtmInfoClose={handleAtmInfoClose} />}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ATM;\r\n","import React from 'react';\nimport ATM from './components/ATM/ATM';\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <ATM />\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}